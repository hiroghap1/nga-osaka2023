---

import Layout from '../../layouts/Layout.astro';
import Lightbox from '@julian_cataldo/astro-lightbox/Lightbox.astro';
import DisplayComponents from '@src/components/DisplayComponents.astro';
import Card from '@src/components/Card.astro';


const { slug } = Astro.params;

export async function getStaticPaths() {
  const res = await fetch(`${import.meta.env.PUBLIC_API_URL}/liquor-shop?per_page=20&order=asc&_embed`);
  const posts = await res.json();

  return posts.map(post => (
    {
      params: { slug: post.slug },
      props: { post: post },
    }
  ))
}

const store = Astro.props.post;

const shopRes = await fetch(`${import.meta.env.PUBLIC_API_URL}/store?per_page=100&order=asc&_embed`);
const shopList = await shopRes.json();
const manageShopList = shopList.filter(shop=>{
  return store.title.rendered === shop.acf.store_in_charge.label;
});

// エリア設定
const taxonomy = await fetch(`${import.meta.env.PUBLIC_API_URL}/area?per_page=20`);
const areas = await taxonomy.json();
// console.log(areas);
const areaList = {};

areas.forEach(item => {
  areaList[item.id] = item.name;
});
// /エリア設定

manageShopList.forEach(shop => {
  shop.image = {};
  if(shop['_embedded']['wp:featuredmedia']) {
    shop.image.url = shop.acf.appetizer_image;
    // shop.image.url = shop['_embedded']['wp:featuredmedia'][0]['source_url'];
    // console.log(shop['_embedded']['wp:featuredmedia'][0]);
  } else {
    shop.image.width = '1920';
    shop.image.height = '1080';
    shop.image.url = 'https://data.nga-osaka.com/2023/wp-content/uploads/2023/08/preparation-image16-9.jpg';
  }
  shop.station = shop.acf.store_station.includes('駅') ? shop.acf.store_station : shop.acf.store_station + '駅';
});

// console.log(manageShopList);
// console.log(store._embedded);
const eyeCatch = store._embedded['wp:featuredmedia'] ? store._embedded['wp:featuredmedia'][0]
  : {
    source_url: 'https://data.nga-osaka.com/2023/wp-content/uploads/2023/08/preparation-image16-9.jpg',
    media_details: {
      width: '1920',
      height: '1280',
    }
  };

const facebook = store.acf.facebook_url ? `<li><a href="${store.acf.facebook_url}" target="_blank"><img src="/assets/images/sns-facebook.png" alt="Facebook" width="36" height="36" loading="lazy"></a></li>` : '';
const twitter = store.acf.twitter_url ? `<li><a href="${store.acf.twitter_url}" target="_blank"><img src="/assets/images/sns-x.png" alt="X(Twitter)" width="36" height="36" loading="lazy"></a></li>` : '';
const instagram = store.acf.instagram_url ? `<li><a href="${store.acf.instagram_url}" target="_blank"><img src="/assets/images/sns-instagram.png" alt="Instagram" width="36" height="36" loading="lazy"></a></li>` : '';

const snsList = (facebook || twitter || instagram) ? `<ul>${facebook + twitter + instagram}</ul>` : '';
const googleMapSrc = `https://maps.google.co.jp/maps?output=embed&q=${store.title.rendered}&z=16`;

const notFoundImage1 = 'https://data.nga-osaka.com/2023/wp-content/uploads/2023/08/preparation-image1-1.jpg';
const storeImage1Url = store.acf.store_image1 ? store.acf.store_image1.url : notFoundImage1;
const storeImage1Width = store.acf.store_image1 ? store.acf.store_image1.width : '1';
const storeImage1Height = store.acf.store_image1 ? store.acf.store_image1.height : '1';
const storeImage1MimeType = store.acf.store_image1 ? store.acf.store_image1.mime_type.split('/')[1] : 'jpeg';

const storeImage2Url = store.acf.store_image2 ? store.acf.store_image2.url : notFoundImage1;
const storeImage2Width = store.acf.store_image2 ? store.acf.store_image2.width : '1';
const storeImage2Height = store.acf.store_image2 ? store.acf.store_image2.height : '1';
const storeImage2MimeType = store.acf.store_image2 ? store.acf.store_image2.mime_type.split('/')[1] : 'jpeg';

const storeImage3Url = store.acf.store_image3 ? store.acf.store_image3.url : notFoundImage1;
const storeImage3Width = store.acf.store_image3 ? store.acf.store_image3.width : '1';
const storeImage3Height = store.acf.store_image3 ? store.acf.store_image3.height : '1';
const storeImage3MimeType = store.acf.store_image3 ? store.acf.store_image3.mime_type.split('/')[1] : 'jpeg';

---

<Layout title={ store.title.rendered }>
  <main data-canceled={store.acf['liquor-shop_canceled']}>
    <div class="store-visual">
      <img src="/assets/images/tokkuri-tokyo.png" class="store-visual__tokkuri-image" width="721" height="1249" alt="">
      <img src={eyeCatch.source_url} alt={store.acf['liquor-shop_name']} class="store-visual__image" width={eyeCatch.media_details.width} height={eyeCatch.media_details.height} decoding="async">
    </div>
    <div class="container">
      <h1><span set:html={store.acf['liquor-shop_number']} />{store.title.rendered}</h1>
      <p set:html={store.content.rendered} />
      <section>
        <div class="store-decriptionBox">
          <h2 class="store-decriptionBox__title">店舗紹介文</h2>
          <div class="store-decriptionBox__inner">
            <p set:html={store.acf['liquor-shop_description']} />
            <svg width="100%" height="100%" class="store-decriptionBox__border">
              <rect
                      width="100%"
                      height="100%"
                      fill="none"
                      stroke="gray"
                      stroke-width="3"
              />
            </svg>
          </div>
        </div>
      </section>
      <div class="store-image section">
        <DisplayComponents image={store.acf['liquor-shop_image1']}>
          <figure class="store-image__figure" data-lightbox="true">
            <img src={storeImage1Url} alt="" class="store-image__image" width={storeImage1Width} height={storeImage1Height} format={storeImage1MimeType} />
          </figure>
        </DisplayComponents>
        <DisplayComponents image={store.acf['liquor-shop_image2']}>
          <figure class="store-image__figure" data-lightbox="true">
            <img src={storeImage2Url} alt="" class="store-image__image" width={storeImage2Width} height={storeImage2Height} format={storeImage2MimeType} />
          </figure>
        </DisplayComponents>
        <DisplayComponents image={store.acf['liquor-shop_image3']}>
          <figure class="store-image__figure" data-lightbox="true">
            <img src={storeImage3Url} alt="" class="store-image__image" width={storeImage3Width} height={storeImage3Height} format={storeImage3MimeType} />
          </figure>
        </DisplayComponents>
      </div>
      <section class="section">
        <h2 class="section__title">担当店舗一覧</h2>
        <div class="store-list" data-area="">
          {
            manageShopList.map((shop:any) => (
                    <Card
                            title = {shop.title.rendered}
                            number = {shop.acf.store_number}
                            href = {shop.slug},
                            open = {shop.acf.event_start},
                            end = {shop.acf.event_end},
                            area = {areaList[shop.area]},
                            canceled = {shop.acf.store_canceled},
                            image = {shop.image.url},
                            price = {Number(shop.acf.appetizer_price1)},
                            appetizer = {shop.acf.appetizer_name},
                            sake = {shop.acf.sake_service},
                            standing = {Number(shop.acf.capacity_standing)},
                            sitting = {Number(shop.acf.capacity_sitting)},
                            station = {shop.station},
                            taste = {shop.acf.sake_taste},
                            flavor = {shop.acf.sake_flavor},
                    />
            ))
          }
        </div>
      </section>
      <section class="section section-chart">
        <h2 class="section__title">振る舞い酒分布図</h2>
        <div class="sake-chart-wrapper">
          <canvas id="sake-chart" class="sake-chart">
          </canvas>
          <div class="sake-label label-right">味が濃厚</div>
          <div class="sake-label label-left">味が淡麗</div>
          <div class="sake-label label-top">香りが高い</div>
          <div class="sake-label label-bottom">香りが穏やか</div>
        </div>
      </section>
      <section class="section">
        <dl class="store-spec">
          <div class="store-spec__group">
            <dt class="store-spec__term">住所</dt>
            <dd class="store-spec__description">
              <p><span class="u-display-block">〒{store.acf['liquor-shop_zip']}</span>
                <span class="u-display-block">{store.acf['liquor-shop_address1']}</span>
                <span class="u-display-block">{store.acf['liquor-shop_address2']}</span></p>
              <!--// <p>最寄り駅：{store.acf['liquor-shop_route']}・{store.acf['liquor-shop_station']}</p>-->
              <div>
                <iframe width="600" height="450" class="googlemap" src={googleMapSrc}></iframe>
              </div>
            </dd>
          </div>
          <div class="store-spec__group">
            <dt class="store-spec__term">電話番号</dt>
            <dd class="store-spec__description">{store.acf['liquor-shop_tel']}</dd>
          </div>
          <div class="store-spec__group">
            <dt class="store-spec__term">Webサイト</dt>
            <dd class="store-spec__description"><a href={store.acf['liquor-shop_url']} target="_blank">{store.acf['liquor-shop_url']}</a></dd>
          </div>
          <div class="store-spec__group">
            <dt class="store-spec__term">SNS</dt>
            <dd class="store-spec__description"><ul class="sns-list" set:html={facebook + twitter + instagram} /></dd>
          </div>
        </dl>
      </section>
    </div>
  </main>
</Layout>

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { CustomEase } from "gsap/CustomEase";
  import { Chart } from 'chart.js/auto';

  gsap.registerPlugin(CustomEase);
  gsap.registerPlugin(ScrollTrigger);
  gsap.timeline({ repeat: 0, repeatDelay: 0.5 })
    .to(".store-visual__tokkuri-image", {duration: 0.5, rotate: '-110deg', translate: "50% -50%"})
    .to(".store-visual__image", { maskSize: '200% 130%', maskPosition: '100% bottom', duration: 2,
      ease: CustomEase.create("custom", "M0,0 C0.126,0.382 0.105,0.438 0.298,0.34 0.478,0.248 0.614,0.839 0.7,0.8 0.928,0.696 0.871,1 1,1 ")});

  gsap.utils.toArray('.store-decriptionBox__title')
    .forEach((item) => {
      gsap.fromTo(item,
        { x: '-100%', opacity: 0},
        { x: '0%', opacity: 1,
          scrollTrigger:{
            trigger:item,
            start:'top 80%',
            end:'bottom 20%',
            toggleActions:'play none none reverse',
          }});
    });

  gsap.utils.toArray('.store-decriptionBox__border>rect')
    .forEach((item) => {
      gsap.to(item,
        {
          strokeDashoffset: '0',
          ease: 'linear',
          duration: 0.7,
          scrollTrigger: {
            trigger: item.parentNode,
            start: 'top 80%',
            end: 'bottom 20%',
            toggleActions: 'play none none reverse',
          }
        });
    });

  gsap.utils.toArray('.store-decriptionBox__inner')
    .forEach((item) => {
      gsap.to(item,
        {
          maskSize: '100% 130%',
          ease: 'linear',
          duration: 0.7,
          scrollTrigger: {
            trigger: item.parentNode,
            start: 'top 80%',
            end: 'bottom 20%',
            toggleActions: 'play none none reverse',
          }
        });
    });

  gsap.utils.toArray('.store-image__figure')
    .forEach((item) => {
      gsap.to(item,
        {
          x: 0,
          opacity: 1,
          duration: 0.7,
          scrollTrigger: {
            trigger: item,
            start: 'top 80%',
            end: 'bottom 20%',
            toggleActions: 'play none none reverse',
          }
        });
    });

  // 動作チェック中設定 パラーメーターchart=trueのときのみチャートを表示
  const urlParams = new URLSearchParams(window.location.search);
  const chartParam = urlParams.get('chart');
  if (chartParam === 'true') {
    const sectionChart = document.querySelector('.section-chart').style.display = 'block';
  }

  const storeList = document.querySelectorAll('.store-item');
  // console.log(storeList);
  const dataSakeList = [];
  const dataPointList = [];
  storeList.forEach(store => {
    const storeLink = store.querySelector('.store-link');
    const canceled = storeLink.dataset.canceled;
    if(canceled === 'true') {return false}
    // データポイントを作成
    const sake = {
      x: store.dataset.taste || 0,
      y: store.dataset.flavor || 0,
      label: store.dataset.title,
      slug: storeLink.href,
    }
    dataSakeList.push(sake);

    // 店番号のCanvas要素を生成
    const canvas = document.createElement('canvas');
    const size = 16;
    canvas.width = size;
    canvas.height = size;
    const centerX = canvas.width / 2;
    const context = canvas.getContext("2d");
    context.fillStyle = "#1D2A82";
    context.arc(centerX,canvas.height / 2, size / 2, 0, Math.PI * 2);
    context.fill();

    const text = store.dataset.number;
    context.fillStyle = "#FFFFFF";
    context.font = "10px Arial";
    const textWidth = context.measureText(text).width;
    const textX = centerX - textWidth / 2;
    const textY = centerX + 3;
    context.fillText(text, textX, textY);

    dataPointList.push(canvas);
  });

  // ツールチップカスタマイズ
  const getOrCreateTooltip = (chart) => {
    let tooltipEl = chart.canvas.parentNode.querySelector('.tooltip');

    if (!tooltipEl) {
      tooltipEl = document.createElement('div');
      tooltipEl.classList.add('tooltip');
      tooltipEl.style.background = '#1D2A82';
      tooltipEl.style.borderRadius = '5px';
      tooltipEl.style.color = 'white';
      tooltipEl.style.opacity = 1;
      tooltipEl.style.width = 'fit-content';
      tooltipEl.style.position = 'absolute';
      tooltipEl.style.fontSize = '12px';
      tooltipEl.style.whiteSpace = 'nowrap';
      tooltipEl.style.visibility = 'visible';
      tooltipEl.style.transform = 'translate(-50%, 0)';
      tooltipEl.style.transition = 'all .1s ease';

      chart.canvas.parentNode.appendChild(tooltipEl);
    }

    return tooltipEl;
  };

  const externalTooltipHandler = (context) => {
    // Tooltip Element
    const {chart, tooltip} = context;
    const tooltipEl = getOrCreateTooltip(chart);

    // Hide if no tooltip
    if (tooltip.opacity === 0) {
      tooltipEl.style.opacity = 0;
      tooltipEl.style.visibility = 'hidden';
      return;
    }

    // Set Text
    if (tooltip.body) {
      tooltipEl.innerHTML = `<a href="${tooltip.dataPoints[0]['raw']['slug']}" style="color:white;text-decoration:none;">${tooltip.dataPoints[0]['raw']['label']}</a>`;
    }
    const {offsetLeft: positionX, offsetTop: positionY} = chart.canvas;

    // Display, position, and set styles for font
    tooltipEl.style.opacity = 1;
    tooltipEl.style.visibility = 'visible';
    tooltipEl.style.left = positionX + tooltip.caretX + 'px';
    tooltipEl.style.top = positionY + tooltip.caretY + 'px';
    tooltipEl.style.padding = tooltip.options.padding + 'px ' + tooltip.options.padding + 'px';
  };

  const sakeChartElement = document.getElementById('sake-chart');
  const sakeChart = new Chart(sakeChartElement, {
    type: "scatter",
    data: {
      datasets: [{
        label: '振る舞い酒分布図',
        data: dataSakeList,
        pointStyle: dataPointList,
      }],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          suggestedMin: -10,
          suggestedMax: 10,
          ticks: {
            display: false
          },
        },
        x: {
          suggestedMin: -10,
          suggestedMax: 10,
          ticks: {
            display: false
          },
        },
      },
      title: {
        display: false,
      },
      ticks: {
        stepSize: 1,
      },
      plugins: {
        legend: {
          display: false,
        },
        tooltip: {
          // caretPadding: 12,
          // displayColors: false,
          // backgroundColor: '#1D2A82',
          // callbacks: {
          //   label: function (context) {
          //     console.log(context);
          //     return `<a href="">${context.raw.label}</a>`;
          //   },
          // },
          enabled: false,
          position: 'nearest',
          external: externalTooltipHandler
        },
      },
    },
  });
</script>
<style lang="scss">
  @use "sass:color";

  main {
    background: url(/assets/images/section-store-bg.jpg);
    &[data-canceled="中止"] {
      & > .store-visual {
        position: relative;

        &::before {
          content: '';
          position: absolute;
          inset: 0;
          display: block;
          background-color: rgba(0, 0, 0, .4);
          z-index: 1;
        }

        &::after {
          content: '出店中止';
          position: absolute;
          top: 50%;
          left: 50%;
          padding: var(--space-x2) var(--space-x8) calc(var(--space-x2) + 4px);
          border-radius: 10px;
          border: 3px solid;
          background-color: rgba(255, 255, 255, .85);
          font-weight: bold;
          font-size: 200%;
          color: var(--color-danger);
          transform: translate(-50%, -50%);
          letter-spacing: .2em;
          z-index: 2;
        }

        &:hover {
          background-size: 0%;
        }
      }
    }
  }
  .store-visual {
    position: relative;
    display: grid;
    grid-template: "storeVisual" 1fr
      / 1fr;
    place-items: center;
    height: 300px;
    @media (min-width: 576px) {
      height: 400px;
    }
    @media (min-width: 768px) {
      height: 500px;
    }
    @media (min-width: 992px) {
      height: 700px;
    }
  }
  .store-visual__tokkuri-image {
    position: absolute;
    grid-area: storeVisual;
    width: 50px;
  }
  .store-visual__image {
    position: absolute;
    grid-area: storeVisual;
    object-fit: cover;
    width: 100%;
    height: 100%;
    -webkit-mask-image: url(/assets/images/wave-mask.png);
    mask-image: url(/assets/images/wave-mask.png);
    -webkit-mask-size: 200% 0%;
    mask-size: 200% 0%;
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-position: left bottom;
    mask-position: left bottom;
  }
  h1 {
    display: flex;
    gap: var(--space-x2);
    width: fit-content;
    margin: 0 calc(50% - 50vw) 0 auto;
    padding: var(--space-x2);
    background-color: rgba(255,255,255,.8);
    font-size: clamp(20px, 3vw, 30px);
    line-height: 1.5;
    transform: translateY(-50%);
    &>span {
      display: inline-flex;
      justify-content: center;
      align-items: center;
      min-width: 2em;
      height: 1.75em;
      padding-bottom: 0.1em;
      color: white;
      border-radius: 5px;
      background-color: var(--color-secondary);
    }
    @media (min-width: 768px) {
      padding: var(--space-x4) 1.5em;
    }
  }
  .store-decriptionBox__title {
    position: absolute;
    margin: 0 auto 0 calc(var(--space-x5) * -1);
    padding: var(--space-x2) var(--space-x5);
    background-color: var(--color-secondary);
    background-image: linear-gradient(-90deg, var(--color-secondary) 0%, color.scale(#70295E, $lightness: -25%) 80%, color.scale(#70295E, $lightness: -15%) 100%);
    color: white;
    z-index: 1;
    transform: translateY(-50%);
    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 5px;
      left: 5px;
      width: 100%;
      height: 100%;
      border: 1px solid white;
    }
    &::after {
      top: 6px;
      left: 6px;
      border-color: var(--color-secondary);
    }
  }
  .store-decriptionBox {
    position: relative;
    max-width: 800px;
    margin-top: var(--space-x20);
    margin-inline: auto;
  }
  .store-decriptionBox__inner {
    padding: var(--space-x10) var(--space-x5) var(--space-x5);
    background-color: rgba(255,255,255,.75);
    -webkit-mask-image: linear-gradient(transparent,#000000 10%, #000000);
    mask-image: linear-gradient(transparent,#000000 10%, #000000);
    //-webkit-mask-image: url(/assets/images/wave-mask.svg);
    //mask-image: url(/assets/images/wave-mask.svg);
    -webkit-mask-size: 100% 0%;
    mask-size: 100% 0%;
    -webkit-mask-position: left bottom;
    mask-position: left bottom;
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
  }
  .store-decriptionBox__border {
    position: absolute;
    inset: 0;
    overflow: visible;
    &>rect {
      width: 100%;
      height: 100%;
      stroke: var(--color-secondary);
      stroke-dasharray:400%;
      stroke-dashoffset:400%;
    }
  }

  .store-image {
    margin-inline: calc(50% - 50vw);
    padding-inline: calc(50vw - 50%);
    overflow-x: hidden;
  }
  .store-spec {
    margin: var(--space-x8) auto 0;
    //max-width: 800px;
  }
  .store-spec__group {
    display: grid;
    grid-template: 1fr / minmax(7em, .3fr) 1fr;
    border: 1px solid #ddd;
    &:not(:nth-of-type(1)) {
      border-top: 0;
    }
  }
  .store-spec__term,
  .store-spec__description {
    padding: var(--space-x2) var(--space-x3);
    @media (min-width: 576px) {
      padding: var(--space-x3) var(--space-x4);
    }
    @media (min-width: 768px) {
      padding: var(--space-x4) var(--space-x8);
    }
  }
  .store-spec__term {
    background-color: var(--color-secondary);
    background-image: linear-gradient(-90deg, var(--color-secondary) 0%, color.scale(#70295E, $lightness: -25%) 80%, color.scale(#70295E, $lightness: -15%) 100%);
    color: white;
  }
  .store-spec__description {
    margin-left: 0;
    background-color: rgba(255,255,255,.8);
    >* {
      margin-top: 0;
    }
  }
  .sns-list {
    display: flex;
    gap: var(--space-x10);
    margin: 0;
  }
  .googlemap {
    width: 100%;
    height: 300px;
    border: 1px solid #ddd;
    @media (min-width: 768px) {
      height: 400px;
    }
  }

  .store-image {
    display: grid;
    grid-template: "image1 image2" auto
    "image3 image2" auto
    / .55fr .45fr;
    gap: var(--space-x8);
    margin-top: var(--space-x10);
  }
  .store-image__figure {
    aspect-ratio: 1;
    height: auto;
    margin: 0;
    opacity: 0;
    box-shadow: 0px 3px 3px rgba(0,0,0,.4), 0px 8px 8px rgba(0,0,0,.15);
    &:nth-of-type(1) {
      grid-area: image1;
      width: calc(100% / 0.55 * 0.45);
      transform: translateX(-25%);
    }
    &:nth-of-type(2) {
      grid-area: image2;
      align-self: center;
      transform: translateX(25%);
    }
    &:nth-of-type(3) {
      grid-area: image3;
      width: calc(100% / 0.55 * 0.45);
      margin-left: auto;
      transform: translateX(-25%);
    }
  }
  .store-image__image {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
  .section__title {
    position: relative;
    width: max-content;
    margin-inline: auto;
    padding: var(--space-x2) var(--space-x5);
    background-color: var(--color-secondary);
    background-image: linear-gradient(-90deg, var(--color-secondary) 0%, color.scale(#70295E, $lightness: -25%) 80%, color.scale(#70295E, $lightness: -15%) 100%);
    color: white;
    z-index: 1;
    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 5px;
      left: 5px;
      width: 100%;
      height: 100%;
      border: 1px solid white;
    }
    &::after {
      top: 6px;
      left: 6px;
      border-color: var(--color-secondary);
    }
  }
  .sake-chart {
    padding: var(--space-x3) var(--space-x4);
  }
  .sake-chart-wrapper {
    position: relative;
    padding: var(--space-x2);
    background-color: #fff;
    height: clamp(320px, 50vw, 520px);
  }
  .sake-label {
    position: absolute;
    inset: 0;
    width: fit-content;
    height: fit-content;
    margin: auto;
    padding: var(--space-x1);
    background-color: rgba(255,255,255,.8);
    font-weight: bold;
    line-height: 1;
    &.label-top {
      bottom: unset;
      color: #6B9767;
    }
    &.label-right {
      left: unset;
      writing-mode: vertical-rl;
      color: #BD5D5D;
    }
    &.label-bottom {
      top: unset;
      color: #4191B1;
    }
    &.label-left {
      right: unset;
      writing-mode: vertical-rl;
      color: #BF9E6C;
    }
  }
  .store-list {
    display: grid;
    gap: var(--space-x8) var(--space-x5);
    margin-top: var(--space-x8);
    @media (min-width: 576px) {
      grid-template-columns: repeat(2, 1fr);
    }
    @media (min-width: 768px) {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  .section-chart {
    display: none;
  }
</style>