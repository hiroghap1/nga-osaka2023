---
import Layout from '@src/layouts/Layout.astro';
import DisplayComponents from '@src/components/DisplayComponents.astro';

type store = {
  link: string;
  title: {
    rendered: string;
  };
  content: {
    rendered: string;
  }
  acf: {
    store_number: string,
    store_name: string,
    store_description: string,
    sake_name: string,
    sake_company: string,
    sake_description: string,
    store_address1: string,
    store_address2: string,
    store_tel: string,
    event_start: string,
    event_end: string,
    capacity_sitting: number,
    capacity_standing: number,
    appetizer_name: string,
    appetizer_price1: number,
    appetizer_image: string,
    sake_service: string,
    sake_pref: string,
    sake_temp: [],
    store_url: string,
    store_image1: undefined | {
      url: string,
      width: string,
      height: string,
      mime_type: string
    },
    store_image2: undefined | {
      url: string,
      width: string,
      height: string,
      mime_type: string
    },
    store_image3: undefined | {
      url: string,
      width: string,
      height: string,
      mime_type: string
    },
    store_zip: string,
    lat: string,
    lng: string,
    map_name: string,
    googlemap_fix: string,
    facebook_url: string,
    twitter_url: string,
    instagram_url: string,
    store_station: string,
    store_route: string,
  },
  _embedded: {
    'wp:featuredmedia': [{
      source_url: string,
      media_details: {
        width: string,
        height: string,
      }
    }]
  },
  image: {
    url: string,
    width: string,
    height: string,
  }
  station: string,
};

const res = await fetch(`${import.meta.env.PUBLIC_API_URL}/store?per_page=100&order=asc&_embed`);
const stores = await res.json();
stores.sort((a, b) => a.acf.store_number - b.acf.store_number);

const taxonomy = await fetch(`${import.meta.env.PUBLIC_API_URL}/area?per_page=20`);
const areas = await taxonomy.json();
// console.log(areas);
const areaList = {};

areas.forEach(item => {
  areaList[item.id] = item.name;
});

const areaNameList = areas
  .sort((a, b) => a.id - b.id) // id順にソート
  .map(item => item.name); // "name"を配列にマップ

// console.log(areaNameList);

stores.forEach(store => {
  store.image = {};
  if(store['_embedded']['wp:featuredmedia']) {
    store.image.url = store.acf.appetizer_image;
    // store.image.url = store['_embedded']['wp:featuredmedia'][0]['source_url'];
    // console.log(store['_embedded']['wp:featuredmedia'][0]);
  } else {
    store.image.width = '1920';
    store.image.height = '1080';
    store.image.url = 'https://data.nga-osaka.com/2023/wp-content/uploads/2023/08/preparation-image16-9.jpg';
  }
  store.station = store.acf.store_station.includes('駅') ? store.acf.store_station : store.acf.store_station + '駅';
  store.temperature = '';
  store.acf.sake_temp.forEach((temp, index) => {
    const tempText = temp.value;
    store.temperature += index === 0 ? tempText : '・' + tempText;
  });
});
---

<Layout title="参加店舗一覧">
  <main>
    <h1><img src="/assets/images/storelist-heading.png" class="storelist-heading__image" alt="参加店舗一覧" width="948" height="851"></h1>
    <div class="container">
      <div class="control-buttons">
        <button type="button" id="button-filter" class="control-button is-active">絞り込み</button>
        <button type="button" id="button-display" class="control-button">表示項目</button>
        <button type="button" id="button-sort" class="control-button">並べ替え</button>
      </div>
      <div class="control-panels">
        <div id="panel-filter" class="control-panel filter-panel is-active" style="display: grid;">
          <div class="filter-panel__header">
            <p class="filter-panel__title">エリア</p>
            <div class="filter-area__buttons">
              <button type="button" id="button-areas-check" class="filter-area__button">すべてチェック</button>
              <button type="button" id="button-areas-discheck" class="filter-area__button">すべて外す</button>
            </div>
          </div>
          <div class="filter-panel__checks">
            {
              areaNameList.map((areaName:string) => (
                      <label class="filter-area__label"><input type="checkbox" name="area-filter" class="filter-area__input" value={areaName} checked>{areaName}</label>
              ))
            }
          </div>
          <details class="filter-panel__details">
            <summary class="filter-panel__summary">提供温度・混雑度</summary>
            <div class="filter-panel__additional">
              <div class="filter-panel__header">
                <p class="filter-panel__title">提供温度</p>
                <div class="filter-area__buttons">
                  <button type="button" id="button-temps-check" class="filter-area__button">すべてチェック</button>
                  <button type="button" id="button-temps-discheck" class="filter-area__button">すべて外す</button>
                </div>
              </div>
              <div class="filter-panel__checks">
                <label class="filter-area__label"><input type="checkbox" name="temp-filter" class="filter-area__input" value="Cold" checked>冷酒</label>
                <label class="filter-area__label"><input type="checkbox" name="temp-filter" class="filter-area__input" value="Normal" checked>常温</label>
                <label class="filter-area__label"><input type="checkbox" name="temp-filter" class="filter-area__input" value="Hot" checked>燗酒</label>
              </div>
              <div class="filter-panel__header">
                <p class="filter-panel__title">混雑度</p>
                <div class="filter-area__buttons">
                  <button type="button" id="button-congestions-check" class="filter-area__button">すべてチェック</button>
                  <button type="button" id="button-congestions-discheck" class="filter-area__button">すべて外す</button>
                </div>
              </div>
              <div class="filter-panel__checks --congestion">
                <label class="filter-area__label"><input type="checkbox" name="congestion-filter" class="filter-area__input" value="congestion1" checked>○（余裕あり）</label>
                <label class="filter-area__label"><input type="checkbox" name="congestion-filter" class="filter-area__input" value="congestion2" checked>△（残席わずか）</label>
                <label class="filter-area__label"><input type="checkbox" name="congestion-filter" class="filter-area__input" value="congestion3" checked>満席（待ち時間小）</label>
                <label class="filter-area__label"><input type="checkbox" name="congestion-filter" class="filter-area__input" value="congestion4" checked>満席（待ち時間大）</label>
                <label class="filter-area__label"><input type="checkbox" name="congestion-filter" class="filter-area__input" value="congestion5" checked>受付終了</label>
              </div>
            </div>
          </details>
        </div>
        <div id="panel-display" class="control-panel display-panel">
          <div class="display-panel__checks">
            <label class="display-panel__label"><input type="checkbox" name="display-filter" class="display-panel__input" value="Image" checked><img src="/assets/images/icon-image.svg" width="18" height="18" alt="">画像</label>
            <label class="display-panel__label"><input type="checkbox" name="display-filter" class="display-panel__input" value="Food" checked><img src="/assets/images/icon-food.svg" width="18" height="18" alt="">付き出し</label>
            <label class="display-panel__label"><input type="checkbox" name="display-filter" class="display-panel__input" value="Sake" checked><img src="/assets/images/icon-sake.svg" width="18" height="18" alt="">振る舞い酒</label>
            <label class="display-panel__label"><input type="checkbox" name="display-filter" class="display-panel__input" value="Temp" checked><img src="/assets/images/icon-temp.svg" width="18" height="18" alt="">提供温度</label>
            <label class="display-panel__label"><input type="checkbox" name="display-filter" class="display-panel__input" value="Time" checked><img src="/assets/images/icon-time.svg" width="18" height="18" alt="">イベント時間</label>
            <label class="display-panel__label"><input type="checkbox" name="display-filter" class="display-panel__input" value="Seat" checked><img src="/assets/images/icon-seat.svg" width="18" height="18" alt="">座席数</label>
            <label class="display-panel__label"><input type="checkbox" name="display-filter" class="display-panel__input" value="Station" checked><img src="/assets/images/icon-train.svg" width="18" height="18" alt="">最寄り駅</label>
          </div>
          <!--<div class="filter-area__buttons">-->
          <!--  <button type="button" id="button-display-check" class="filter-area__button">すべてチェック</button>-->
          <!--  <button type="button" id="button-display-discheck" class="filter-area__button">すべて外す</button>-->
          <!--</div>-->
        </div>
        <div id="panel-sort" class="control-panel sort-panel">
          <div class="sort-panel__radios">
            <label class="sort-panel__label"><input type="radio" name="sort" id="sort-number-asc" class="sort-panel__input" checked>店舗番号順</label>
            <label class="sort-panel__label"><input type="radio" name="sort" id="sort-number-desc" class="sort-panel__input">店舗番号逆順</label>
            <label class="sort-panel__label"><input type="radio" name="sort" id="sort-open-asc" class="sort-panel__input">開店時間が早い順</label>
            <label class="sort-panel__label"><input type="radio" name="sort" id="sort-open-desc" class="sort-panel__input">開店時間が遅い順</label>
            <label class="sort-panel__label"><input type="radio" name="sort" id="sort-lo-asc" class="sort-panel__input">ラストオーダーが早い順</label>
            <label class="sort-panel__label"><input type="radio" name="sort" id="sort-lo-desc" class="sort-panel__input">ラストオーダーが遅い順</label>
          </div>
        </div>
      </div>
      <div class="store-count">85軒中<span id="displayed-count" class="displayed-count">0</span>軒表示</div>
    <div id="store-list" class="store-list"
         data-area={areaNameList.join(',')}
         data-display-image="true"
         data-display-food="true"
         data-display-sake="true"
         data-display-temp="true"
         data-display-time="true"
         data-display-seat="true"
         data-display-station="true"
         data-temp-cold="true"
         data-temp-normal="true"
         data-temp-hot="true"
         data-congestion1="true"
         data-congestion2="true"
         data-congestion3="true"
         data-congestion4="true"
         data-congestion5="true"
    >
      {
        stores.map((store:any) => (
                <article class="store-item"
                         data-area={areaList[store.area]}
                         data-number={store.acf.store_number}
                         data-open={store.acf.event_start.replace(':','')}
                         data-end={store.acf.event_end.replace(':','')}
                         data-id={store.id}
                         data-congestion="0"
                         data-modified="0"
                         data-temp={store.temperature}
                         data-display="true">
                  <a href={`/store/${store.slug}`} class="store-link" data-canceled={store.acf.store_canceled}>
                    <figure class="store-figure">
                      <img src={store.image.url} width="1920" height="1080" alt="" class="store-image" loading="lazy">
                      <figcaption class="store-figcaption">{areaList[store.area]}</figcaption>
                    </figure>
                    <h2 class="store-title" transition:name="title"><span class="store-number">{store.acf.store_number}</span>{store.title.rendered}<span class="store-price">{Number(store.acf.appetizer_price1).toLocaleString()}円</span></h2>
                    <div class="store-content">
                      <p class="store-content__appetizer"><img src="/assets/images/icon-food.svg" width="18" height="18" alt="">{store.acf.appetizer_name.replaceAll('　',' ')}</p>
                      <p class="store-content__sake"><img src="/assets/images/icon-sake.svg" width="18" height="18" alt="">{store.acf.sake_service.replaceAll('　',' ')}</p>
                      <p class="store-content__temp"><img src="/assets/images/icon-temp.svg" width="18" height="18" alt="">{store.temperature}</p>
                      <p class="store-content__time"><img src="/assets/images/icon-time.svg" width="18" height="18" alt="">{store.acf.event_start}〜{store.acf.event_end}</p>
                      <p class="store-content__seat"><img src="/assets/images/icon-seat.svg" width="18" height="18" alt="">立食 {store.acf.capacity_standing}名/着席 {store.acf.capacity_sitting}名/合計 {Number(store.acf.capacity_standing) + Number(store.acf.capacity_sitting)}名</p>
                      <p class="store-content__station"><img src="/assets/images/icon-train.svg" width="18" height="18" alt="">{store.station}</p>
                    </div>
                  </a>
                </article>
        ))
      }
    </div>
  </div>
        </main>
        </Layout>

<script>
const areaFilters = document.querySelectorAll('[name="area-filter"]');
const tempFilters = document.querySelectorAll('[name="temp-filter"]');
const congestionFilters = document.querySelectorAll('[name="congestion-filter"]');
const displayItems = document.querySelectorAll('[name="display-filter"]');
const storeList = document.getElementById('store-list');
const storeItems = document.querySelectorAll('.store-item');
const buttonAreasCheck = document.getElementById('button-areas-check');
const buttonAreasDisCheck = document.getElementById('button-areas-discheck');
const buttonTempsCheck = document.getElementById('button-temps-check');
const buttonTempsDisCheck = document.getElementById('button-temps-discheck');
const buttonCongestionsCheck = document.getElementById('button-congestions-check');
const buttonCongestionsDisCheck = document.getElementById('button-congestions-discheck');
const buttonControls = document.querySelectorAll('.control-button');
const panelControls = document.querySelectorAll('.control-panel');
const areaChecked = [];
areaFilters.forEach(areaFilter => {
  areaFilter.addEventListener('click', ()=>{
      storeItems.forEach(storeItem =>{
        if(storeItem.dataset.area === areaFilter.value) {
          storeItem.dataset.display = areaFilter.checked;
        }
      });
    console.log(areaFilter.value);
  });
});
tempFilters.forEach(tempFilter => {
  tempFilter.addEventListener('click', ()=>{
    const attribute = 'temp' + tempFilter.value;
    if(tempFilter.checked) {
      storeList.dataset[attribute] = 'true';
    } else {
      storeList.dataset[attribute] = 'false';
    }
  });
});
congestionFilters.forEach(congestionFilter => {
  congestionFilter.addEventListener('click', ()=>{
    const attribute = congestionFilter.value;
    if(congestionFilter.checked) {
      storeList.dataset[attribute] = 'true';
    } else {
      storeList.dataset[attribute] = 'false';
    }
  });
});
displayItems.forEach(displayItem =>{
  displayItem.addEventListener('click', ()=> {
    const attribute = 'display' + displayItem.value;
    if(displayItem.checked) {
      storeList.dataset[attribute] = 'true';
    } else {
      storeList.dataset[attribute] = 'false';
    }
  });
});
buttonAreasCheck.addEventListener('click',()=> {
  areaFilters.forEach(areaFilter => {
    areaFilter.checked = true;
  });
  storeItems.forEach(storeItem =>{
      storeItem.dataset.display = true;
  });
});
buttonAreasDisCheck.addEventListener('click',()=> {
  areaFilters.forEach(areaFilter => {
    areaFilter.checked = false;
  });
  storeItems.forEach(storeItem =>{
    storeItem.dataset.display = false;
  });
});
buttonTempsCheck.addEventListener('click',()=> {
  tempFilters.forEach(tempFilter => {
    tempFilter.checked = true;
  });
  storeList.dataset.tempCold = "true";
  storeList.dataset.tempNormal = "true";
  storeList.dataset.tempHot = "true";
});
buttonTempsDisCheck.addEventListener('click',()=> {
  tempFilters.forEach(tempFilter => {
    tempFilter.checked = false;
  });
  storeList.dataset.tempCold = "false";
  storeList.dataset.tempNormal = "false";
  storeList.dataset.tempHot = "false";
});
buttonCongestionsCheck.addEventListener('click',()=> {
  congestionFilters.forEach(congestionFilter => {
    congestionFilter.checked = true;
  });
  for(let i = 1; i < 6; i++) {
    const dataName = 'congestion' + i;
    storeList.setAttribute(`data-${dataName}`, "true");
  }
});
buttonCongestionsDisCheck.addEventListener('click',()=> {
  congestionFilters.forEach(congestionFilter => {
    congestionFilter.checked = false;
  });
  for(let i = 1; i < 6; i++) {
    const dataName = 'Congestion' + i;
    storeList.setAttribute(`data-${dataName}`, "false");
  }
});
buttonControls.forEach(button =>{
  button.addEventListener('click',()=>{
    buttonControls.forEach(buttonRemove => {
      buttonRemove.classList.remove('is-active');
    });
    panelControls.forEach(panel => {
      panel.classList.remove('is-active');
    });
    button.classList.add('is-active');
   const id = 'panel-' + button.getAttribute('id').split('-')[1];
   document.getElementById(id).classList.add('is-active');
  });
});

// ソートボタン処理
document.getElementById('sort-number-asc').addEventListener('click', () => {
  sortByAttribute('number', true);
});

document.getElementById('sort-number-desc').addEventListener('click', () => {
  sortByAttribute('number', false);
});

document.getElementById('sort-open-asc').addEventListener('click', () => {
  sortByAttribute('open', true);
});

document.getElementById('sort-open-desc').addEventListener('click', () => {
  sortByAttribute('open', false);
});

document.getElementById('sort-lo-asc').addEventListener('click', () => {
  sortByAttribute('end', true);
});

document.getElementById('sort-lo-desc').addEventListener('click', () => {
  sortByAttribute('end', false);
});
function sortByAttribute(attribute, ascending = true) {
  const sortOrder = ascending ? 1 : -1;
  const elementsArray = Array.from(storeItems).sort((a, b) => {
    const valueA = parseInt(a.dataset[attribute]);
    const valueB = parseInt(b.dataset[attribute]);
    return (valueA - valueB) * sortOrder;
  });

  elementsArray.forEach((element) => {
    storeList.appendChild(element);
  });
}

// 混雑度取得
const res = await fetch(`${ import.meta.env.PUBLIC_API_URL }/congestion`);
const posts = await res.json();
// console.log(posts);
const congestionList = document.querySelectorAll('.store-item');
congestionList.forEach(elm => {
  const congestion = posts.find(obj => obj.id === Number(elm.dataset.id));
  elm.dataset.congestion = congestion.store_congestion ? congestion.store_congestion : 0;
  elm.dataset.modified = congestion.last_modified ? congestion.last_modified : 0;
});
// /混雑度取得

// 表示中件数カウント
function updateDisplayedCount() {
  let displayedCount = 0;

  storeItems.forEach((item) => {
    const itemStyle = window.getComputedStyle(item);
    if (itemStyle.display !== 'none') {
      displayedCount++;
    }
  });

  // 表示中の個数を表示する要素を取得
  const displayedCountElement = document.getElementById('displayed-count');
  // displayedCountElement.textContent = String(displayedCount);
  animateCountChange(displayedCount,displayedCountElement);
}

// カウントをアニメーションで切り替える関数
function animateCountChange(newValue,countElement) {
  let currentValue = parseInt(countElement.textContent, 10);
  const step = Math.sign(newValue - currentValue); // 増減するステップ
  const duration = 500; // アニメーションの時間（ミリ秒）

  // アニメーションループ
  function updateCount() {
    if (currentValue !== newValue) {
      currentValue += step;
      countElement.textContent = currentValue;
      requestAnimationFrame(updateCount);
    }
  }

  // アニメーション開始
  updateCount();
}

const observer = new MutationObserver(updateDisplayedCount);
const config = {attributes: true, subtree: true };
const target = document.querySelector('.store-list');
observer.observe(storeList, config);
window.addEventListener('load', updateDisplayedCount);

</script>

<style lang="scss">
  @use "sass:color";

  main {
    padding-block: var(--space-x8);
    background: url(/assets/images/store-bg.jpg);
  }
  .storelist-heading__image {
    width: 200px;
    margin-inline: auto;
  }
  .control-buttons {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }
  .control-button {
    padding: var(--space-x3) var(--space-x1);
    border: 0;
    border-bottom: 2px solid transparent;
    background-color: #fff;
    font-size: 16px;
    cursor: pointer;
    transition: background-color .3s ease-out;
    @media (hover: hover) {
      &:hover {
        background-color: color.scale(#1D2A82, $lightness: 95%);
      }
    }

    &.is-active {
      color: var(--color-sub-accent);
      border-color: var(--color-sub-accent);
    }
  }
  .control-panels {
    display: grid;
    grid-template: "panel" 1fr / 1fr;
  }
  .control-panel {
    grid-area: panel;
    background-color: #fff;
    padding: var(--space-x5) var(--space-x4) var(--space-x5);
    z-index: 0;
    &.is-active {
      z-index: 1;
    }
    &.filter-panel {
      padding-top: var(--space-x3);
    }
  }

  .sort-panel__radios {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    @media (min-width: 576px) {
      grid-template-columns: repeat(2, 1fr);
    }
    @media (min-width: 768px) {
      //grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
  }
  .filter-panel__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-x2);
    padding-left:  var(--space-x2);
  }
  .filter-panel__title {
    font-size: 110%;
    margin: 0;
  }
  .filter-panel__checks {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(90px, 1fr));
    @media (min-width: 480px) {
      grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    }
    @media (min-width: 768px) {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
    &.--congestion {
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
      @media (min-width: 480px) {
        grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
      }
      @media (min-width: 768px) {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      }
    }
  }
  .display-panel__checks {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    @media (min-width: 576px) {
      grid-template-columns: repeat(3, 1fr);
    }
    @media (min-width: 768px) {
      //grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
  }
  .filter-area__label,
  .display-panel__label,
  .sort-panel__label {
    padding: var(--space-x1);
    cursor: pointer;
  }
  .display-panel__label {
    display: flex;
  }
  .filter-area__buttons {
    display: flex;
    justify-content: flex-end;
    //margin-top: var(--space-x2);
  }
  .filter-area__button {
    padding: var(--space-x2) var(--space-x3);
    border: 0;
    border-radius: 3px;
    background-color: transparent;
    cursor: pointer;
    transition: .3s background-color ease-in-out;
    &:nth-of-type(1) {
      color: var(--color-accent);
      &:hover {
        background-color: #4BA09519;
      }
    }
    &:nth-of-type(2) {
      color: #666;
      &:hover {
        background-color: #eee;
      }
    }
  }
  .store-count {
    margin-top: var(--space-x8);
    text-align: right;
  }
  .displayed-count {
    display: inline-block;
    margin-left: var(--space-x1);
    font-size: 120%;
  }
  .store-list {
    display: grid;
    gap: var(--space-x8) var(--space-x5);
    @media (min-width: 576px) {
      grid-template-columns: repeat(2, 1fr);
    }
    @media (min-width: 1040px) {
      grid-template-columns: repeat(3, 1fr);
    }
    &[data-display-image="false"] {
      row-gap: var(--space-x5);
      .store-item {
        &::before,
        &::after {
          display: none;
        }
      }
      .store-figure {
        display: none;
      }
    }
    &[data-display-food="false"] .store-content__appetizer {
      display: none;
    }
    &[data-display-sake="false"] .store-content__sake {
      display: none;
    }
    &[data-display-temp="false"] .store-content__temp {
      display: none;
    }
    &[data-display-time="false"] .store-content__time {
      display: none;
    }
    &[data-display-seat="false"] .store-content__seat {
      display: none;
    }
    &[data-display-station="false"] .store-content__station {
      display: none;
    }
    &[data-display-food="false"][data-display-sake="false"][data-display-temp="false"][data-display-time="false"][data-display-seat="false"][data-display-station="false"] .store-link{
      padding-bottom: 0;
    }

    &[data-congestion1="false"] {
      &>[data-congestion="○（余裕あり）"] {
        display: none;
      }
      &>[data-congestion="0"] {
        display: none;
      }
    }
    &[data-congestion2="false"] {
      &>[data-congestion="△（残席わずか）"] {
        display: none;
      }
      &>[data-congestion="0"] {
        display: none;
      }
    }
    &[data-congestion3="false"] {
      &>[data-congestion="満席（待ち時間小）"] {
        display: none;
      }
      &>[data-congestion="0"] {
        display: none;
      }
    }
    &[data-congestion4="false"] {
      &>[data-congestion="満席（待ち時間大）"] {
        display: none;
      }
      &>[data-congestion="0"] {
        display: none;
      }
    }
    &[data-congestion5="false"] {
      &>[data-congestion="受付終了"] {
        display: none;
      }
      &>[data-congestion="0"] {
        display: none;
      }
    }
    &[data-temp-cold="false"] {
      &>[data-temp="冷酒"] {
        display: none;
      }
    }
    &[data-temp-normal="false"] {
      &>[data-temp="常温"] {
        display: none;
      }
    }
    &[data-temp-hot="false"] {
      &>[data-temp="燗酒"] {
        display: none;
      }
    }
    &[data-temp-cold="false"][data-temp-normal="false"] {
      &>[data-temp="冷酒・常温"] {
        display: none;
      }
    }
    &[data-temp-normal="false"][data-temp-hot="false"] {
      &>[data-temp="常温・燗酒"] {
        display: none;
      }
    }
    &[data-temp-cold="false"][data-temp-hot="false"] {
      &>[data-temp="冷酒・燗酒"] {
        display: none;
      }
    }
    &[data-temp-cold="false"][data-temp-normal="false"][data-temp-hot="false"] {
      &>[data-temp="冷酒・常温・燗酒"] {
        display: none;
      }
    }
  }
  .store-item {
    position: relative;
    display: none;
    &[data-display="true"] {
      display: block;
    }
    &:not([data-congestion="0"]) {
      &::before,
      &::after {
        position: absolute;
        right: 0;
        display: inline-block;
        width: 190px;
        background-color: rgba(255,255,255,0.8);
        line-height: 1;
        z-index: 2;
        text-align: center;
      }
      &::before {
        height: 30px;
        top: 0;
        content: attr(data-congestion);
        padding: var(--space-x2) var(--space-x1) 0;
        font-weight: bold;
      }
      &::after {
        top: 30px;
        content: attr(data-modified)'更新';
        padding: 0 var(--space-x1) var(--space-x2);
        background-color: rgba(255,255,255,0.8);
        font-size: 80%;
      }
    }
  }
  .store-link {
    display: block;
    height: 100%;
    padding: 0 var(--space-x3) var(--space-x4);
    background-color: #fff;
    text-decoration: none;
    color: var(--color-font);
    filter: drop-shadow(0 3px 4px rgba(0,0,0,.2));
    transition: filter .3s ease-in-out;
    &:hover {
      filter: drop-shadow(0 5px 7px rgba(0,0,0,.2));
    }
    &[data-canceled="true"] {
      position: relative;
      &::before {
        content: '';
        position: absolute;
        inset: 0;
        display: block;
        background-color:rgba(0,0,0,.4);
        z-index: 1;
      }
      &::after {
        content: '出店中止';
        position: absolute;
        top: 50%;
        left: 50%;
        padding: 2px .5em;
        border-radius: 5px;
        border: 3px solid;
        background-color: rgba(255,255,255,.85);
        font-weight: bold;
        font-size: 110%;
        letter-spacing: .2em;
        color: var(--color-danger);
        transform: translate(-50%, -50%);
        z-index: 2;
      }
      &:hover {
        filter: drop-shadow(0 3px 4px rgba(0,0,0,.2));
      }
    }
  }
  .store-figure {
    position: relative;
    margin: 0 calc(var(--space-x3) * -1);
  }
  .store-image {
    width: 100%;
    aspect-ratio: 16 / 9;
    object-fit: cover;
  }
  .store-figcaption {
    position: absolute;
    left: 0;
    bottom: 0;
    line-height: 1;
    padding: var(--space-x2) var(--space-x3);
    background-color: var(--color-sub-accent);
    color: white;
  }
  .store-title {
    display: grid;
    align-items: center;
    gap: var(--space-x1);
    grid-template-columns: 1.7em 1fr max-content;
    margin: 0;
    padding-block: var(--space-x2);
    font-size: 16px;
    line-height: 1.3;
  }
  .store-number {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    min-width: 1.7em;
    height: 1.7em;
    padding-bottom: 2px;
    border-radius: 50%;
    background-color: var(--color-sub-accent);
    color: white;
  }
  .store-price {
    margin-left: auto;
    padding-left: var(--space-x2);
    font-size: 120%;
  }
  .store-content {
    color: #666;
    font-size: 14px;
    &>p {
      display: flex;
      align-items: center;
      gap: var(--space-x1);
      margin: 0;
      padding-top: 6px;
      line-height: 1.2;
      &.store-content__appetizer {
        padding-top: 0;
        color: #444;
        font-weight: bold;
      }
    }
  }
  .filter-panel__summary {
    display: inline-flex;
    align-items: center;
    margin-top: var(--space-x2);
    padding: var(--space-x2) var(--space-x3);
    font-size: 90%;
    color: #3273F6;
    border-radius: 3px;
    transition: background-color .3s ease-out;
    cursor: pointer;
    @media (hover: hover) {
      &:hover {
        background-color: color.scale(#3273F6, $lightness: 95%);
      }
    }
    &::before {
      content: '';
      display: inline-block;
      width: .75em;
      height: .5em;
      margin-right: var(--space-x1);
      background-color: #3273F6;
      clip-path: polygon(0 0, 100% 0, 50% 100%);
      transition: rotate .3s ease-out;
    }
    &::-webkit-details-marker {
      display: none;
    }
  }
  .filter-panel__details[open] {
    &>.filter-panel__summary::before {
      rotate: 180deg;
    }
  }
  .filter-panel__additional {
    &>.filter-panel__header {
      margin-top: var(--space-x3);
    }
    &>.filter-panel__checks+.filter-panel__header {
      margin-top: var(--space-x5);
    }
  }
</style>